/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * VendaVarejo.java
 *
 * Created on 23/12/2010, 11:36:00
 */
package licrystsystem.consignacao;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import licrystsystem.impressora.GerenciadorImpressora;
import licrystsystem.main.FramePrincipal;
import org.apache.poi.hssf.usermodel.*;

/**
 *
 * @author Diego
 */
public class VendaVarejo extends javax.swing.JPanel {

    private FramePrincipal framePrincipal;
    private int qtdProdutos = 0;
    private float preco_total = 0;
    private List<Integer> quantidadeRestanteNoEstoque = new ArrayList<Integer>();
    private List<String> codigos = new ArrayList<String>();
    private DefaultTableModel modeloTabela;
    private List<Integer> posicoesTabela = new ArrayList<Integer>();
    private String diretorio = "";
    private GerenciadorImpressora impressora = new GerenciadorImpressora();
    private NumberFormat formatoMonetario = NumberFormat.getCurrencyInstance(new Locale("pt", "BR"));

    /**
     * Creates new form VendaVarejo
     */
    public VendaVarejo(FramePrincipal framePrincipal) {
        this.framePrincipal = framePrincipal;
        initComponents();
        jButton5.setVisible(false);
        modeloTabela = (DefaultTableModel) jTable1.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabelTotalUnidades = new javax.swing.JLabel();

        setBackground(new java.awt.Color(102, 0, 51));

        jLabel1.setBackground(java.awt.Color.white);
        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 204, 255));
        jLabel1.setText("Produto:");

        jTextField1.setBackground(new java.awt.Color(255, 204, 255));
        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 204, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setBackground(new java.awt.Color(255, 51, 255));
        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("R$");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel3)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jLabel2.setBackground(new java.awt.Color(255, 51, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 204, 255));
        jLabel2.setText("Total:");

        jButton1.setBackground(new java.awt.Color(102, 0, 51));
        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Vender");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(102, 0, 51));
        jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton2.setText("Voltar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setBackground(new java.awt.Color(240, 240, 240));
        jTable1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Quantidade", "Produto", "Preço Unitário", "Preço Total"
            }
        ){
            public boolean isCellEditable(int rowIndex, int mColIndex) {
                return false;
            }
        });
        jTable1.setGridColor(new java.awt.Color(240, 240, 240));
        jScrollPane1.setViewportView(jTable1);

        jButton3.setBackground(new java.awt.Color(102, 0, 51));
        jButton3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton3.setText("Consultar tabela de produtos");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel4.setBackground(java.awt.Color.white);
        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 204, 255));
        jLabel4.setText("Quantidade:");

        jTextField2.setBackground(new java.awt.Color(255, 204, 255));
        jTextField2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextField2.setText("1");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField2KeyTyped(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(102, 0, 51));
        jButton4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton4.setText("Remover Selecionado");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(102, 0, 51));
        jButton5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton5.setText("Imprimir");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 204, 255));
        jLabel6.setText("Total de Unidades:");

        jLabelTotalUnidades.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabelTotalUnidades.setForeground(new java.awt.Color(255, 204, 255));
        jLabelTotalUnidades.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 691, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelTotalUnidades)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1)
                    .addComponent(jLabel4)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabelTotalUnidades))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton3))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed

        if (!jTextField1.getText().isEmpty() && !jTextField2.getText().isEmpty()) {
            try {
                framePrincipal.setRs(framePrincipal.getStm().executeQuery("SELECT P.NOME, P.PRECO, P.QTDE, P.QTDECONS, P.CODBARRAS FROM PRODUTO P WHERE P.CODBARRAS = " + Long.parseLong(getjTextField1().getText()) + ";"));
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Produto não encontrado");
            }
            boolean sinalizadorAux = false;
            try {
                while (framePrincipal.getRs().next()) {
                    for (int i = 0; i < codigos.size(); i++) {
                        if (framePrincipal.getRs().getString("CODBARRAS").equals(codigos.get(i))) {
                            if ((quantidadeRestanteNoEstoque.get(i) - Integer.parseInt(jTextField2.getText())) - framePrincipal.getRs().getInt("QTDECONS") >= 0) {
                                quantidadeRestanteNoEstoque.set(i, quantidadeRestanteNoEstoque.get(i) - Integer.parseInt(jTextField2.getText()));
                                getPosicoesTabela().add(i);
                                sinalizadorAux = true;
                            } else {
                                jTextField2.setText(Integer.toString(framePrincipal.getRs().getInt("QTDE") - framePrincipal.getRs().getInt("QTDECONS") + 1));
                            }
                        }
                    }
                    if (framePrincipal.getRs().getInt("QTDE") - Integer.parseInt(jTextField2.getText()) - framePrincipal.getRs().getInt("QTDECONS") >= 0) {
                        if (getModeloTabela().getRowCount() < getQtdProdutos() + 1) {
                            getModeloTabela().addRow(new String[getModeloTabela().getColumnCount()]);
                            jTable1.scrollRectToVisible(jTable1.getCellRect(jTable1.getRowCount() - 1, 0, false));
                        }
                        getjTable1().getModel().setValueAt(jTextField2.getText(), getQtdProdutos(), 0);
                        getjTable1().getModel().setValueAt(framePrincipal.getRs().getString("NOME"), getQtdProdutos(), 1);
                        getjTable1().getModel().setValueAt(formatoMonetario.format(Float.parseFloat(framePrincipal.getRs().getString("PRECO"))), getQtdProdutos(), 2);
                        getjTable1().getModel().setValueAt(formatoMonetario.format(Integer.parseInt(jTextField2.getText())
                                * Float.parseFloat(framePrincipal.getRs().getString("PRECO"))), getQtdProdutos(), 3);
                        if (!sinalizadorAux) {
                            getQuantidadeRestanteNoEstoque().add(framePrincipal.getRs().getInt("QTDE") - Integer.parseInt(jTextField2.getText()));
                            getCodigos().add(framePrincipal.getRs().getString("CODBARRAS"));
                            getPosicoesTabela().add(getQuantidadeRestanteNoEstoque().size() - 1);
                        }
                        sinalizadorAux = false;
                        setPreco_total(getPreco_total() + Integer.parseInt(jTextField2.getText()) * Float.parseFloat(framePrincipal.getRs().getString("PRECO")));
                        getjLabel3().setText(formatoMonetario.format(getPreco_total()));
                        setQtdProdutos(getQtdProdutos() + 1);
                        Integer numUnidades = Integer.parseInt(getjLabelTotalUnidades().getText()) + Integer.parseInt(jTextField2.getText());
                        getjLabelTotalUnidades().setText(numUnidades.toString());
                    } else {
                        JOptionPane.showMessageDialog(null, "Quantidade do produto " + framePrincipal.getRs().getString("NOME") + " insuficiente no estoque");
                    }
                    jTextField2.setText("1");
                    getjTextField1().setText("");
                    jScrollPane1.getVerticalScrollBar().setValue(jScrollPane1.getVerticalScrollBar().getMaximum() + 1);
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Produto não encontrado");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Preencha todos campos" + jLabel3.getText());
        }
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        framePrincipal.setContentPane(framePrincipal.getMenuPrincipal());
        framePrincipal.pack();
        framePrincipal.setExtendedState(FramePrincipal.MAXIMIZED_BOTH);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int aux = JOptionPane.showConfirmDialog(null, "Deseja encerrar a venda?");
        if (aux == 0 && acionarImpressoes()) {

            for (int i = 0; i < getQuantidadeRestanteNoEstoque().size(); i++) {
                try {
                    framePrincipal.getStm().executeUpdate("UPDATE PRODUTO SET QTDE = " + getQuantidadeRestanteNoEstoque().get(i) + " WHERE CODBARRAS = " + getCodigos().get(i) + ";");
                    framePrincipal.getInserirProduto1_2().setAtualizado(true);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao atualizar o estoque");
                }
            }
            JOptionPane.showMessageDialog(null, "Total da fatura: " + jLabel3.getText());
            framePrincipal.setContentPane(framePrincipal.getMenuPrincipal());
            framePrincipal.pack();
            framePrincipal.setExtendedState(FramePrincipal.MAXIMIZED_BOTH);        // TODO add your handling code here:
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        if (!jTextField1.getText().isEmpty() && !jTextField2.getText().isEmpty()) {
            jTextField1ActionPerformed(evt);
        } else {
            JOptionPane.showMessageDialog(null, "Preencha todos campos" + jLabel3.getText());
        }
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyTyped
        int k = evt.getKeyChar();
        if ((k > 47 && k < 58)) {
        } else {
            if (k == 22) {
                jTextField2.setText("");
            }
            evt.setKeyChar((char) KeyEvent.VK_CLEAR);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2KeyTyped

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        int k = evt.getKeyChar();
        if ((k > 47 && k < 58)) {
        } else {
            if (k == 22) {
                getjTextField1().setText("");
            }
            evt.setKeyChar((char) KeyEvent.VK_CLEAR);
        }
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            framePrincipal.getTabelaProdutos().setN(2);
            framePrincipal.setContentPane(framePrincipal.getTabelaProdutos());
            framePrincipal.pack();
            framePrincipal.setExtendedState(FramePrincipal.MAXIMIZED_BOTH);
            if (framePrincipal.getInserirProduto1_2().isAtualizado()) {
                framePrincipal.setRs(framePrincipal.getStm().executeQuery("SELECT P.NOME, P.CODBARRAS, P.PRECO, P.QTDE, P.QTDECONS FROM PRODUTO P GROUP BY P.NOME, P.CODBARRAS, P.PRECO, P.QTDE, P.QTDECONS;"));
                int i = 0;
                while (framePrincipal.getRs().next()) {
                    if (framePrincipal.getTabelaProdutos().getModeloTabela().getRowCount() < i + 1) {
                        framePrincipal.getTabelaProdutos().getModeloTabela().addRow(new String[framePrincipal.getTabelaProdutos().getModeloTabela().getColumnCount()]);
                    }
                    framePrincipal.getTabelaProdutos().getModeloTabela().setValueAt(framePrincipal.getRs().getString("NOME"), i, 0);
                    framePrincipal.getTabelaProdutos().getModeloTabela().setValueAt(framePrincipal.getRs().getString("CODBARRAS"), i, 1);
                    framePrincipal.getTabelaProdutos().getModeloTabela().setValueAt("R$ " + framePrincipal.getRs().getString("PRECO"), i, 2);
                    framePrincipal.getTabelaProdutos().getModeloTabela().setValueAt(framePrincipal.getRs().getString("QTDE"), i, 3);
                    framePrincipal.getTabelaProdutos().getModeloTabela().setValueAt(framePrincipal.getRs().getString("QTDECONS"), i, 4);
                    i++;
                }
                framePrincipal.getTabelaProdutos().getjTable1().repaint();
                framePrincipal.getInserirProduto1_2().setAtualizado(false);
            }
        } catch (SQLException ex) {
            Logger.getLogger(VendaVarejo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (jTable1.getSelectedRow() != -1) {

            //Ajusta a quantidade restante no estoque
            //Ela passa a ser o que tinha mais o quantidade do produto removido
            getQuantidadeRestanteNoEstoque().set(posicoesTabela.get(jTable1.getSelectedRow()), quantidadeRestanteNoEstoque.get(posicoesTabela.get(jTable1.getSelectedRow()))
                    + Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString()));
            Integer numUnidades = Integer.parseInt(getjLabelTotalUnidades().getText())
                    - Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
            getjLabelTotalUnidades().setText(numUnidades.toString());
            posicoesTabela.remove(jTable1.getSelectedRow());

            //Reajusta o preço total
            setPreco_total(getPreco_total() - Float.parseFloat(
                    jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString().substring(3).replace(",", ".")));
            getjLabel3().setText(formatoMonetario.format(getPreco_total()));

            setQtdProdutos(getQtdProdutos() - 1);
            framePrincipal.getVendaVarejo().getModeloTabela().removeRow(jTable1.getSelectedRow());
            JOptionPane.showMessageDialog(null, "Produto removido com sucesso");

        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma linha para ser removida");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
    }//GEN-LAST:event_jButton5ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelTotalUnidades;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    private boolean acionarImpressoes() {
        try {
            Calendar calendar = new GregorianCalendar();
            Date trialTime = new Date();
            calendar.setTime(trialTime);
            SimpleDateFormat formatador1 = new SimpleDateFormat("dd-MM-yyyy");
            SimpleDateFormat formatador2 = new SimpleDateFormat("hh:mm:ss");
            String dataAtual = formatador1.format(calendar.getTime());
            String horaAtual = formatador2.format(calendar.getTime());
            Integer qtde;
            String produto;
            String cod;
            Float valorUnit;
            Float valorTotal;
            Float precoTotal = new Float(0.0);
            int numUnidades = 0;
            String bufferPrint = "";
            FileOutputStream stream;
            HSSFWorkbook wb = new HSSFWorkbook();
            HSSFSheet plan1;

            File auxFile = new File(diretorio + "Venda Varejo/"
                    + "Venda Varejo-" + dataAtual + "-" + horaAtual.replaceAll(":", "_") + ".xls");
            if (auxFile.exists()) {
                int overwriteFile = JOptionPane.showConfirmDialog(null, "O arquivo Venda Varejo-"
                        + dataAtual + "-" + horaAtual.replaceAll(":", "_") + ".xls"
                        + " já existe. Deseja substituir?", "", JOptionPane.YES_NO_OPTION);
                if (overwriteFile == 0)//Deseja sobrescrever
                {
                    auxFile.delete();
                } else //Não deseja Sobrescrever
                {
                    JOptionPane.showMessageDialog(null, "O arquivo não foi criado");
                    return false;
                }
            }

            // cria a planilha
            plan1 = wb.createSheet("Plan1");
            // linha
            HSSFRow row;
            // cria a linha na planilha o parametro da função create row é a linha
            plan1.setColumnWidth(0, 1400);
            plan1.setColumnWidth(1, 8300);
            plan1.setColumnWidth(2, 3400);
            plan1.setColumnWidth(3, 3100);
            plan1.setColumnWidth(4, 3100);

            //Altera o tipo da fonte
            HSSFFont fonte = wb.createFont();
            fonte.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
            fonte.setFontHeightInPoints((short) 10);
            HSSFCellStyle estilo1 = wb.createCellStyle();
            estilo1.setFont(fonte);

            //linha 1
            row = plan1.createRow(0);
            row.setHeightInPoints(15);
            row.createCell(0);
            row.getCell(0).setCellStyle(estilo1);
            row.getCell(0).setCellValue("LICRISTY COM DE LING.");

            //linha 2
            row = plan1.createRow(1);
            row.setHeightInPoints(15);
            row.createCell(0);
            row.getCell(0).setCellStyle(estilo1);
            row.getCell(0).setCellValue("FONE: 4524-0546 / 9239-0406");

            //linha 3
            row = plan1.createRow(2);
            row.setHeightInPoints(15);
            row.createCell(0);
            row.getCell(0).setCellStyle(estilo1);
            row.getCell(0).setCellValue("DATA: " + dataAtual);

            //Altera o tipo da fonte
            HSSFFont fonte2 = wb.createFont();
            fonte2.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
            fonte2.setFontHeightInPoints((short) 9);
            HSSFCellStyle estilo2 = wb.createCellStyle();
            estilo2.setFont(fonte2);
            estilo2.setBorderBottom((short) 2);
            estilo2.setBorderTop((short) 2);
            estilo2.setBorderLeft((short) 2);
            estilo2.setBorderRight((short) 2);
            estilo2.setAlignment((short) 2);
            HSSFRow row2;

            //linha 4
            row2 = plan1.createRow(4);
            row2.setHeightInPoints(15);

            //coluna 1
            row2.createCell(0);
            row2.getCell(0).setCellStyle(estilo2);
            row2.getCell(0).setCellValue("QTDE");
            //coluna 2
            row2.createCell(1);
            row2.getCell(1).setCellStyle(estilo2);
            row2.getCell(1).setCellValue("PRODUTOS");
            //coluna 3
            row2.createCell(2);
            row2.getCell(2).setCellStyle(estilo2);
            row2.getCell(2).setCellValue("REF");
            //coluna 4
            row2.createCell(3);
            row2.getCell(3).setCellStyle(estilo2);
            row2.getCell(3).setCellValue("VALOR UNIT");
            //coluna 5
            row2.createCell(4);
            row2.getCell(4).setCellStyle(estilo2);
            row2.getCell(4).setCellValue("VALOR QTDE");

            //Colocando os produtos
            for (int i = 0; i < posicoesTabela.size(); i++) {
                try {
                    framePrincipal.setRs(framePrincipal.getStm().executeQuery(
                            "SELECT P.NOME, P.PRECO, P.QTDE, P.QTDECONS, P.CODBARRAS FROM PRODUTO P WHERE P.CODBARRAS = "
                            + Long.parseLong(codigos.get(posicoesTabela.get(i))) + ";"));
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Produto não encontrado");
                }
                row = plan1.createRow(5 + i);
                try {
                    while (framePrincipal.getRs().next()) {
                        if (jTable1.getValueAt(i, 0) != null) {

                            //variáveis da tabela
                            qtde = Integer.parseInt(jTable1.getValueAt(i, 0).toString());
                            produto = framePrincipal.getRs().getString("NOME");
                            cod = framePrincipal.getRs().getString("CODBARRAS");
                            valorUnit = Float.parseFloat(framePrincipal.getRs().getString("PRECO"));
                            valorTotal = qtde * Float.parseFloat(framePrincipal.getRs().getString("PRECO"));
                            numUnidades += qtde;
                            //coluna 1
                            row.createCell(0);
                            row.getCell(0).setCellValue(qtde);
                            //coluna 2
                            row.createCell(1);
                            row.getCell(1).setCellValue(produto);
                            //coluna 3
                            row.createCell(2);
                            row.getCell(2).setCellValue(cod);
                            //coluna 4
                            row.createCell(3);
                            estilo2 = wb.createCellStyle();
                            estilo2.setDataFormat((short) 8);
                            row.getCell(3).setCellStyle(estilo2);
                            row.getCell(3).setCellValue(valorUnit);
                            //coluna 5
                            row.createCell(4);
                            row.getCell(4).setCellStyle(estilo2);
                            row.getCell(4).setCellValue(valorTotal);

                            precoTotal = precoTotal + valorTotal;

                            bufferPrint = bufferPrint + produto + " " + cod + "\n"
                                    + qtde + " X " + formatoMonetario.format(valorUnit) + "                    "
                                    + formatoMonetario.format(valorTotal) + "\n";
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(VendaVarejo.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            bufferPrint = bufferPrint + "Número de unidades: " + numUnidades + "\n";

            //Alterando a fonte 
            HSSFFont fonte3 = wb.createFont();
            fonte3.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
            fonte3.setFontHeightInPoints((short) 9);
            HSSFCellStyle estilo3 = wb.createCellStyle();
            estilo3.setFont(fonte3);
            estilo3.setBorderBottom((short) 2);
            estilo3.setBorderTop((short) 2);
            estilo3.setBorderLeft((short) 2);
            estilo3.setBorderRight((short) 2);
            estilo3.setAlignment((short) 2);

            //linha 6 + qtde de produtos
            HSSFRow row3;
            row3 = plan1.createRow(quantidadeRestanteNoEstoque.size() + 5);
            row3.createCell(0);
            row3.getCell(0).setCellStyle(estilo3);
            int aux = (5 + quantidadeRestanteNoEstoque.size());
            row3.getCell(0).setCellFormula("SUM(A6:" + "A" + aux + ")");

            fonte3 = wb.createFont();
            fonte3.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
            fonte3.setFontHeightInPoints((short) 9);

            //linha 7 + qtde de produtos
            HSSFRow row4;
            row4 = plan1.createRow(quantidadeRestanteNoEstoque.size() + 6);
            HSSFCellStyle estilo4 = wb.createCellStyle();

            //Alterando a fonte
            estilo4.setBorderBottom((short) 2);
            estilo4.setBorderTop((short) 2);
            estilo4.setBorderLeft((short) 2);
            estilo4.setBorderRight((short) 0);
            estilo4.setFont(fonte3);
            row4.createCell(2);
            row4.getCell(2).setCellStyle(estilo4);
            row4.getCell(2).setCellValue("VALOR TOTAL:");

            //Alterando a fonte
            HSSFCellStyle estilo5 = wb.createCellStyle();
            estilo5.setBorderBottom((short) 2);
            estilo5.setBorderTop((short) 2);
            estilo5.setBorderLeft((short) 0);
            estilo5.setBorderRight((short) 2);
            estilo5.setDataFormat((short) 8);
            estilo5.setFont(fonte3);
            row4.createCell(3);
            row4.getCell(3).setCellStyle(estilo5);
            row4.getCell(3).setCellFormula("SUM(E6:" + "E" + aux + ")");

            if (!imprimeNaoFiscal(bufferPrint, formatoMonetario.format(precoTotal))) {
                return false;
            }
            stream = new FileOutputStream(diretorio + "Venda Varejo/Venda Varejo-" + dataAtual + "-"
                    + horaAtual.replaceAll(":", "_") + ".xls");
            wb.write(stream);
            JOptionPane.showMessageDialog(null, "Arquivo criado");
            return true;
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao criar arquivo, feche a planilha e tente novamente");
            return false;
        }
    }

    private boolean imprimeNaoFiscal(String bufferPrint, String precoTotal) {
        String cpf = JOptionPane.showInputDialog(null, "Deseja colocar CPF?", "", JOptionPane.YES_NO_OPTION);
        //1ª Via
        if (cpf != null) {
            int aux = JOptionPane.showConfirmDialog(null, "Deseja imprimir a venda?");
            if (aux == 0) {
                impressora.imprimeCabecalho(cpf, null, null);
                impressora.imprime(bufferPrint);
                impressora.imprimeRodape(precoTotal);
                impressora.cortaPapel();
                //2ª Via
                impressora.imprimeCabecalho(cpf, null, null);
                impressora.imprime(bufferPrint);
                impressora.imprimeRodape(precoTotal);
                impressora.cortaPapel();
                return true;
            } else if (aux == 1) {
                return true;
            }
        }
        return false;

    }

    /**
     * @return the jTable1
     */
    public javax.swing.JTable getjTable1() {
        return jTable1;
    }

    /**
     * @param jTable1 the jTable1 to set
     */
    public void setjTable1(javax.swing.JTable jTable1) {
        this.jTable1 = jTable1;
    }

    /**
     * @return the jLabelTotalUnidades
     */
    public javax.swing.JLabel getjLabelTotalUnidades() {
        return jLabelTotalUnidades;
    }

    /**
     * @param jLabelTotalUnidades the jLabelTotalUnidades to set
     */
    public void setjLabelTotalUnidades(javax.swing.JLabel jLabelTotalUnidades) {
        this.jLabelTotalUnidades = jLabelTotalUnidades;
    }

    /**
     * @return the qtdProdutos
     */
    public int getQtdProdutos() {
        return qtdProdutos;
    }

    /**
     * @param qtdProdutos the qtdProdutos to set
     */
    public void setQtdProdutos(int qtdProdutos) {
        this.qtdProdutos = qtdProdutos;
    }

    /**
     * @return the preco_total
     */
    public float getPreco_total() {
        return preco_total;
    }

    /**
     * @param preco_total the preco_total to set
     */
    public void setPreco_total(float preco_total) {
        this.preco_total = preco_total;
    }

    /**
     * @return the quantidades
     */
    public List<Integer> getQuantidadeRestanteNoEstoque() {
        return quantidadeRestanteNoEstoque;
    }

    /**
     * @param quantidades the quantidades to set
     */
    public void setQuantidadeRestanteNoEstoque(List<Integer> quantidadeRestanteNoEstoque) {
        this.quantidadeRestanteNoEstoque = quantidadeRestanteNoEstoque;
    }

    /**
     * @return the codigos
     */
    public List<String> getCodigos() {
        return codigos;
    }

    /**
     * @param codigos the codigos to set
     */
    public void setCodigos(List<String> codigos) {
        this.codigos = codigos;
    }

    /**
     * @return the modeloTabela
     */
    public DefaultTableModel getModeloTabela() {
        return modeloTabela;
    }

    /**
     * @param modeloTabela the modeloTabela to set
     */
    public void setModeloTabela(DefaultTableModel modeloTabela) {
        this.modeloTabela = modeloTabela;
    }

    /**
     * @return the jLabel3
     */
    public javax.swing.JLabel getjLabel3() {
        return jLabel3;
    }

    /**
     * @param jLabel3 the jLabel3 to set
     */
    public void setjLabel3(javax.swing.JLabel jLabel3) {
        this.jLabel3 = jLabel3;
    }

    /**
     * @return the jTextField1
     */
    public javax.swing.JTextField getjTextField1() {
        return jTextField1;
    }

    /**
     * @param jTextField1 the jTextField1 to set
     */
    public void setjTextField1(javax.swing.JTextField jTextField1) {
        this.jTextField1 = jTextField1;
    }

    /**
     * @return the posicoesTabela
     */
    public List<Integer> getPosicoesTabela() {
        return posicoesTabela;
    }

    /**
     * @param posicoesTabela the posicoesTabela to set
     */
    public void setPosicoesTabela(List<Integer> posicoesTabela) {
        this.posicoesTabela = posicoesTabela;
    }

    /**
     * @return the diretorio
     */
    public String getDiretorio() {
        return diretorio;
    }

    /**
     * @param diretorio the diretorio to set
     */
    public void setDiretorio(String diretorio) {
        this.diretorio = diretorio;
    }
}
