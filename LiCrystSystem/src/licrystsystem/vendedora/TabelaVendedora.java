/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TabelaVendedores.java
 *
 * Created on 21/12/2010, 16:15:42
 */
package licrystsystem.vendedora;

import licrystsystem.main.FramePrincipal;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

/**
 *
 * @author Diego
 */
public class TabelaVendedora extends javax.swing.JPanel {

    private FramePrincipal framePrincipal;
    private int n;
    private DefaultTableModel modeloTabela;
    private List<String> Ruas = new ArrayList<String>();
    private List<String> Numeros = new ArrayList<String>();
    private List<String> Comps = new ArrayList<String>();
    private List<String> Bairros = new ArrayList<String>();
    private List<String> RGs = new ArrayList<String>();
    private List<String> CPFs = new ArrayList<String>();
    private List<String> Data = new ArrayList<String>();
    private List<String> telTrab = new ArrayList<String>();
    private List<String> Obs = new ArrayList<String>();
    private String diretorio;

    /** Creates new form TabelaVendedores */
    public TabelaVendedora(FramePrincipal framePrincipal) {
        this.framePrincipal = framePrincipal;
        this.n = 0;
        initComponents();
        modeloTabela = (DefaultTableModel) jTable1.getModel();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton5 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();

        setBackground(new java.awt.Color(102, 0, 51));

        jButton5.setBackground(new java.awt.Color(102, 0, 51));
        jButton5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton5.setText("Remover Selecionado");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(102, 0, 51));
        jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton2.setText("Voltar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(255, 204, 255));

        jTable1.setBackground(new java.awt.Color(240, 240, 240));
        jTable1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "NOME", "ENDEREÃ‡O", "CIDADE", "TELEFONE RESIDENCIAL", "TELEFONE CELULAR"
            }

        ){public boolean isCellEditable(int rowIndex, int mColIndex) {
            return false;
        }
    }
    );
    jTable1.setGridColor(new java.awt.Color(240, 240, 240));
    jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jTable1MouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(jTable1);

    jButton6.setBackground(new java.awt.Color(102, 0, 51));
    jButton6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jButton6.setText("Imprimir");
    jButton6.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton6ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jButton5)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jButton6))
                .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING))
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18))
    );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (getN() == 1) {
            framePrincipal.getCadastrarVendedora1().setN(0);
            framePrincipal.setContentPane(framePrincipal.getCadastrarVendedora1());
            framePrincipal.pack();
            framePrincipal.setExtendedState(FramePrincipal.MAXIMIZED_BOTH);
        } else if (getN() == 2) {
            framePrincipal.getTabelaVendedora().getjTable1().setEnabled(true);
            framePrincipal.setContentPane(framePrincipal.getConsignacao1());
            framePrincipal.pack();
            framePrincipal.setExtendedState(FramePrincipal.MAXIMIZED_BOTH);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.getClickCount() == 2) {
            framePrincipal.setContentPane(framePrincipal.getCadastrarVendedora1());
            framePrincipal.pack();
            framePrincipal.setExtendedState(FramePrincipal.MAXIMIZED_BOTH);

            framePrincipal.getCadastrarVendedora1().getjTextField1().setText(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());

            String RG1 = RGs.get(jTable1.getSelectedRow()).toString().substring(0, 8);
            String RG2 = RGs.get(jTable1.getSelectedRow()).toString().substring(8, 9);
            framePrincipal.getCadastrarVendedora1().getjTextField3().setText(RG1);
            framePrincipal.getCadastrarVendedora1().getjTextField4().setText(RG2);

            String CPF1 = CPFs.get(jTable1.getSelectedRow()).toString().substring(0, 9);
            String CPF2 = CPFs.get(jTable1.getSelectedRow()).toString().substring(9, 11);
            framePrincipal.getCadastrarVendedora1().getjTextField5().setText(CPF1);
            framePrincipal.getCadastrarVendedora1().getjTextField6().setText(CPF2);

            framePrincipal.getCadastrarVendedora1().getjTextField2().setText(Ruas.get(jTable1.getSelectedRow()));

            framePrincipal.getCadastrarVendedora1().getjTextField9().setText(Numeros.get(jTable1.getSelectedRow()));

            framePrincipal.getCadastrarVendedora1().getjTextField10().setText(Comps.get(jTable1.getSelectedRow()));

            framePrincipal.getCadastrarVendedora1().getjTextField7().setText(Bairros.get(jTable1.getSelectedRow()));

            framePrincipal.getCadastrarVendedora1().getjTextField8().setText(jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString());

            framePrincipal.getCadastrarVendedora1().getjTextField11().setText(Data.get(jTable1.getSelectedRow()).split("-")[2] + Data.get(jTable1.getSelectedRow()).split("-")[1] + Data.get(jTable1.getSelectedRow()).split("-")[0]);

            if (jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString().length() >= 4) {
                framePrincipal.getCadastrarVendedora1().getjTextField12().setText(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString().substring(0, 4));

                framePrincipal.getCadastrarVendedora1().getjTextField13().setText(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString().substring(4, jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString().length()));
            }

            if (jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString().length() >= 4) {
                framePrincipal.getCadastrarVendedora1().getjTextField16().setText(jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString().substring(0, 4));

                framePrincipal.getCadastrarVendedora1().getjTextField17().setText(jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString().substring(4, jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString().length()));
            }


            if (telTrab.get(jTable1.getSelectedRow()).length() >= 4) {
                framePrincipal.getCadastrarVendedora1().getjTextField14().setText(telTrab.get(jTable1.getSelectedRow()).substring(0, 4));

                framePrincipal.getCadastrarVendedora1().getjTextField15().setText(telTrab.get(jTable1.getSelectedRow()).substring(4, telTrab.get(jTable1.getSelectedRow()).length()));
            }
            framePrincipal.getCadastrarVendedora1().getjTextArea1().setText(Obs.get(jTable1.getSelectedRow()));

            framePrincipal.getCadastrarVendedora1().getjTextField1().setEnabled(false);
            framePrincipal.getCadastrarVendedora1().getjTextField3().setEnabled(false);
            framePrincipal.getCadastrarVendedora1().getjTextField4().setEnabled(false);
            framePrincipal.getCadastrarVendedora1().getjTextField5().setEnabled(false);
            framePrincipal.getCadastrarVendedora1().getjTextField6().setEnabled(false);
            framePrincipal.getCadastrarVendedora1().getjButton2().setVisible(false);
            framePrincipal.getCadastrarVendedora1().getjButton3().setText("Voltar para tabela de vendedores");
            framePrincipal.getCadastrarVendedora1().getjButton1().setText("Modificar");
            framePrincipal.getCadastrarVendedora1().setN(3);

        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (jTable1.getSelectedRow() != -1) {
            try {
                framePrincipal.getCadastrarVendedora1().setAtualizado(false);
                framePrincipal.getStm().executeUpdate("DELETE FROM VENDEDORA WHERE NOME = '" + jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0).toString() + "';");
                modeloTabela.removeRow(jTable1.getSelectedRow());
                JOptionPane.showMessageDialog(null, "Vendedora removida com sucesso");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Vendedoras com produtos em consignaÃ§Ã£o nÃ£o podem ser removidas");
            }
        } else {
            JOptionPane.showMessageDialog(null, "NÃ£o foi possÃ­vel remover a vendedora");
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            FileOutputStream stream;
            HSSFWorkbook wb = new HSSFWorkbook();
            HSSFSheet plan1;
            // cria a planilha
            plan1 = wb.createSheet("Plan1");
            // linha
            HSSFRow row;
            // cria a linha na planilha o parametro da funÃ§Ã£o create row Ã© a linha
            row = plan1.createRow(0);
            plan1.setColumnWidth(0, 10000);
            plan1.setColumnWidth(1, 10000);
            plan1.setColumnWidth(2, 6000);
            plan1.setColumnWidth(3, 6000);
            plan1.setColumnWidth(4, 6000);
            Calendar calendar = new GregorianCalendar();
            Date trialTime = new Date();
            calendar.setTime(trialTime);
            SimpleDateFormat formatador = new SimpleDateFormat("dd-MM-yyyy");
            row.createCell(0);
            row.getCell(0).setCellValue("Vendedoras");
            row = plan1.createRow(2);
            for (int i = 0; i < jTable1.getColumnCount(); i++) {
                row.createCell(i);
                row.getCell(i).setCellValue(jTable1.getColumnName(i));
            }
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                row = plan1.createRow(3 + i);
                for (int j = 0; j < jTable1.getColumnCount(); j++) {
                    row.createCell(j);
                    if (jTable1.getValueAt(i, j) != null) {
                        row.getCell(j).setCellValue(jTable1.getValueAt(i, j).toString());
                    }
                }
            }
            stream = new FileOutputStream(getDiretorio() + "Vendedoras" + formatador.format(calendar.getTime()) + ".xls");
            wb.write(stream);
            JOptionPane.showMessageDialog(null, "Arquivo criado");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao criar arquivo, feche a planilha e tente novamente");
        }
    }//GEN-LAST:event_jButton6ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    
    
    /**
     * @return the n
     */
    public int getN() {
        return n;
    }

    /**
     * @param n the n to set
     */
    public void setN(int n) {
        this.n = n;
    }

    /**
     * @return the modeloTabela
     */
    public DefaultTableModel getModeloTabela() {
        return modeloTabela;
    }

    /**
     * @param modeloTabela the modeloTabela to set
     */
    public void setModeloTabela(DefaultTableModel modeloTabela) {
        this.modeloTabela = modeloTabela;
    }

    /**
     * @return the jTable1
     */
    public javax.swing.JTable getjTable1() {
        return jTable1;
    }

    /**
     * @param jTable1 the jTable1 to set
     */
    public void setjTable1(javax.swing.JTable jTable1) {
        this.jTable1 = jTable1;
    }

    /**
     * @return the RGs
     */
    public List<String> getRGs() {
        return RGs;
    }

    /**
     * @param RGs the RGs to set
     */
    public void setRGs(List<String> RGs) {
        this.RGs = RGs;
    }

    /**
     * @return the CPFs
     */
    public List<String> getCPFs() {
        return CPFs;
    }

    /**
     * @param CPFs the CPFs to set
     */
    public void setCPFs(List<String> CPFs) {
        this.CPFs = CPFs;
    }

    /**
     * @return the Data
     */
    public List<String> getData() {
        return Data;
    }

    /**
     * @param Data the Data to set
     */
    public void setData(List<String> Data) {
        this.Data = Data;
    }

    /**
     * @return the telTrab
     */
    public List<String> getTelTrab() {
        return telTrab;
    }

    /**
     * @param telTrab the telTrab to set
     */
    public void setTelTrab(List<String> telTrab) {
        this.telTrab = telTrab;
    }

    /**
     * @return the Obs
     */
    public List<String> getObs() {
        return Obs;
    }

    /**
     * @param Obs the Obs to set
     */
    public void setObs(List<String> Obs) {
        this.Obs = Obs;
    }

    /**
     * @return the Ruas
     */
    public List<String> getRuas() {
        return Ruas;
    }

    /**
     * @param Ruas the Ruas to set
     */
    public void setRuas(List<String> Ruas) {
        this.Ruas = Ruas;
    }

    /**
     * @return the Numeros
     */
    public List<String> getNumeros() {
        return Numeros;
    }

    /**
     * @param Numeros the Numeros to set
     */
    public void setNumeros(List<String> Numeros) {
        this.Numeros = Numeros;
    }

    /**
     * @return the Comps
     */
    public List<String> getComps() {
        return Comps;
    }

    /**
     * @param Comps the Comps to set
     */
    public void setComps(List<String> Comps) {
        this.Comps = Comps;
    }

    /**
     * @return the Bairros
     */
    public List<String> getBairros() {
        return Bairros;
    }

    /**
     * @param Bairros the Bairros to set
     */
    public void setBairros(List<String> Bairros) {
        this.Bairros = Bairros;
    }

    /**
     * @return the diretorio
     */
    public String getDiretorio() {
        return diretorio;
    }

    /**
     * @param diretorio the diretorio to set
     */
    public void setDiretorio(String diretorio) {
        this.diretorio = diretorio;
    }
}
