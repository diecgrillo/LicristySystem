/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TabelaProdutos.java
 *
 * Created on 21/12/2010, 15:57:24
 */
package licrystsystem.produto;

import licrystsystem.produto.InserirProduto1;
import licrystsystem.main.FramePrincipal;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

/**
 *
 * @author Diego
 */
public class TabelaProdutos extends javax.swing.JPanel {

    private FramePrincipal framePrincipal;
    private DefaultTableModel modeloTabela;
    private JFormattedTextField field;
    private JFormattedTextField jftf;
    private int n;
    private String diretorio;

    /** Creates new form TabelaProdutos */
    public TabelaProdutos(FramePrincipal framePrincipal) {

        this.framePrincipal = framePrincipal;
        initComponents();
        modeloTabela = (DefaultTableModel) jTable1.getModel();
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(250);
        DefaultTableCellRenderer direita = new DefaultTableCellRenderer();


        field = new JFormattedTextField();
        field.addKeyListener(new KeyListener() {

            public void keyTyped(KeyEvent evt) {
                int k = evt.getKeyChar();
                if ((k > 47 && k < 58)) {
                } else {
                    if (k == 22) {
                        field.setText("");
                    }
                    evt.setKeyChar((char) KeyEvent.VK_CLEAR);
                }
            }

            public void keyPressed(KeyEvent e) {
            }

            public void keyReleased(KeyEvent e) {
            }
        });

        jTable1.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(field));
        jTable1.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(field));
        jTable1.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(field));

        jftf = new JFormattedTextField();
        jftf.addKeyListener(new KeyListener() {

            public void keyTyped(KeyEvent evt) {
                if (jftf.getText().contains("$")) {
                    jftf.setText("");
                }
                int k = evt.getKeyChar();
                if ((k > 47 && k < 58) || k == 44) {
                    if (k == 44) {
                        evt.setKeyChar('.');
                        if (jftf.getText().contains(".") || jftf.getText().equals("")) {
                            evt.setKeyChar((char) KeyEvent.VK_CLEAR);
                        }
                    }
                } else {
                    if (k == 22) {
                        jftf.setText("");
                    }
                    evt.setKeyChar((char) KeyEvent.VK_CLEAR);
                }
            }

            public void keyPressed(KeyEvent e) {
            }

            public void keyReleased(KeyEvent e) {
            }
        });

        jTable1.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(jftf));

        direita.setHorizontalAlignment(SwingConstants.RIGHT);
        jTable1.getColumnModel().getColumn(1).setCellRenderer(direita);
        jTable1.getColumnModel().getColumn(2).setCellRenderer(direita);
        jTable1.getColumnModel().getColumn(3).setCellRenderer(direita);
        jTable1.getColumnModel().getColumn(4).setCellRenderer(direita);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setBackground(new java.awt.Color(102, 0, 51));

        jButton1.setBackground(new java.awt.Color(102, 0, 51));
        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Voltar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setBackground(new java.awt.Color(240, 240, 240));
        jTable1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "NOME", "COD. DE BARRAS", "PREÇO", "QTDE", "EM CONSIGNAÇÃO"
            }

        ){
            @Override
            public void setValueAt(Object aValue, int row, int column) {
                if(!aValue.toString().isEmpty()){
                    Object value1 = this.getValueAt(row, column);
                    super.setValueAt(aValue, row, column);
                    Object value2 = this.getValueAt(row, column);
                    if(value2 != value1 && value2 != null && value1 != null && !framePrincipal.getInserirProduto1_2().isAtualizado()) {
                        System.out.println("passou");
                        try{
                            if(column == 0){
                                framePrincipal.getStm().executeUpdate("UPDATE PRODUTO SET NOME = '" + value2.toString() + "' WHERE CODBARRAS = " + this.getValueAt(row, 1).toString() + ";");
                            }else if(column == 1){
                                super.setValueAt(value1, row, column);
                                JOptionPane.showMessageDialog(null, "Não é possível mudar o código do produto");
                            }else if(column == 2){
                                framePrincipal.getStm().executeUpdate("UPDATE PRODUTO SET PRECO = " + Float.parseFloat(value2.toString()) + " WHERE CODBARRAS = " + this.getValueAt(row, 1).toString() + ";");
                                BigDecimal aNumber = new BigDecimal(Float.parseFloat(value2.toString()));
                                aNumber = aNumber.setScale(2, BigDecimal.ROUND_HALF_UP);
                                value2 = "RS " + aNumber;
                                super.setValueAt(value2, row, column);
                            }else if(column == 3){
                                framePrincipal.getStm().executeUpdate("UPDATE PRODUTO SET QTDE = " + Integer.parseInt(value2.toString()) + " WHERE CODBARRAS = " + this.getValueAt(row, 1).toString() + ";");
                            }else if(column == 4){
                                framePrincipal.getStm().executeUpdate("UPDATE PRODUTO SET QTDECONS = " + Integer.parseInt(value2.toString()) + " WHERE CODBARRAS = " + this.getValueAt(row, 1).toString() + ";");
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(InserirProduto1.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Preencha a célula para alterar valor");
                }}
            });
            jTable1.setGridColor(new java.awt.Color(240, 240, 240));
            jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
            jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyTyped(java.awt.event.KeyEvent evt) {
                    jTable1KeyTyped(evt);
                }
            });
            jScrollPane1.setViewportView(jTable1);

            jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
            jLabel1.setForeground(new java.awt.Color(255, 204, 255));
            jLabel1.setText("Produtos:");

            jButton2.setBackground(new java.awt.Color(102, 0, 51));
            jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
            jButton2.setText("Remover Selecionado");
            jButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton2ActionPerformed(evt);
                }
            });

            jButton3.setBackground(new java.awt.Color(102, 0, 51));
            jButton3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
            jButton3.setText("Imprimir");
            jButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton3ActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButton2)
                            .addGap(33, 33, 33)
                            .addComponent(jLabel1)
                            .addGap(42, 42, 42)
                            .addComponent(jButton3)))
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jButton2)
                        .addComponent(jButton3))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap())
            );

            layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton2, jButton3});

        }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (getN() == 2) {
            framePrincipal.setContentPane(framePrincipal.getVendaVarejo());
            framePrincipal.getVendaVarejo().getjTextField1().requestFocus();
            framePrincipal.pack();
            framePrincipal.setExtendedState(FramePrincipal.MAXIMIZED_BOTH);
        } else if (getN() == 4) {
            jTable1.setEnabled(true);
            framePrincipal.setContentPane(framePrincipal.getBaixaConsignacao());
            framePrincipal.getBaixaConsignacao().getjTextField1().requestFocus();
            framePrincipal.pack();
            framePrincipal.setExtendedState(FramePrincipal.MAXIMIZED_BOTH);
        } else if (getN() == 3) {
            jTable1.setEnabled(true);
            framePrincipal.setContentPane(framePrincipal.getVendaConsignacao());
            framePrincipal.getVendaConsignacao().getjTextField1().requestFocus();
            framePrincipal.pack();
            framePrincipal.setExtendedState(FramePrincipal.MAXIMIZED_BOTH);
        } else if (getN() == 5) {
            jTable1.setEnabled(true);
            framePrincipal.setContentPane(framePrincipal.getDevolverSacola());
            framePrincipal.pack();
            framePrincipal.setExtendedState(FramePrincipal.MAXIMIZED_BOTH);
        } else {
            framePrincipal.setContentPane(framePrincipal.getInserirProduto1());
            framePrincipal.pack();
            framePrincipal.setExtendedState(FramePrincipal.MAXIMIZED_BOTH);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyTyped
        if (jTable1.getSelectedColumn() == 1 || jTable1.getSelectedColumn() == 3 || jTable1.getSelectedColumn() == 4) {

            int k = evt.getKeyChar();
            if ((k > 47 && k < 58)) {
            } else {
                if (k == 22) {
                    field.setText("");
                }
                evt.setKeyChar((char) KeyEvent.VK_CLEAR);
            }

        } else if (jTable1.getSelectedColumn() == 3) {
            if (jftf.getText().contains("$")) {
                jftf.setText("");
            }
            int k = evt.getKeyChar();
            if ((k > 47 && k < 58) || k == 44) {
                if (k == 44) {
                    evt.setKeyChar('.');
                    if (jftf.getText().contains(".") || jftf.getText().equals("")) {
                        evt.setKeyChar((char) KeyEvent.VK_CLEAR);
                    }
                }
            } else {
                if (k == 22) {
                    jftf.setText("");
                }
                evt.setKeyChar((char) KeyEvent.VK_CLEAR);
            }
        }
    }//GEN-LAST:event_jTable1KeyTyped

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (jTable1.getSelectedRow() != -1) {
            try {
                framePrincipal.getInserirProduto1_2().setAtualizado(true);
                framePrincipal.getStm().executeUpdate("DELETE FROM PRODUTO WHERE CODBARRAS = " + jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 1).toString() + ";");
                modeloTabela.removeRow(jTable1.getSelectedRow());
                JOptionPane.showMessageDialog(null, "Produto removido com sucesso");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Produtos em consignação não podem ser removidos");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma linha para ser removida");
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            FileOutputStream stream = null;
            HSSFWorkbook wb = new HSSFWorkbook();
            HSSFSheet plan1 = null;
            // cria a planilha
            plan1 = wb.createSheet("Plan1");
            // linha
            HSSFRow row = null;
            // cria a linha na planilha o parametro da função create row é a linha
            row = plan1.createRow(0);
            plan1.setColumnWidth(0, 10000);
            plan1.setColumnWidth(1, 6000);
            plan1.setColumnWidth(2, 6000);
            plan1.setColumnWidth(3, 6000);
            plan1.setColumnWidth(4, 6000);
            Calendar calendar = new GregorianCalendar();
            Date trialTime = new Date();
            calendar.setTime(trialTime);
            SimpleDateFormat formatador = new SimpleDateFormat("dd-MM-yyyy");
            row.createCell(0);
            row.getCell(0).setCellValue("Produtos");
            row = plan1.createRow(2);
            for (int i = 0; i < jTable1.getColumnCount(); i++) {
                row.createCell(i);
                row.getCell(i).setCellValue(jTable1.getColumnName(i));
            }
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                row = plan1.createRow(3 + i);
                for (int j = 0; j < jTable1.getColumnCount(); j++) {
                    row.createCell(j);
                    if (jTable1.getValueAt(i, j) != null) {
                        row.getCell(j).setCellValue(jTable1.getValueAt(i, j).toString());
                    }
                }
            }
            stream = new FileOutputStream(diretorio + "Produtos" + formatador.format(calendar.getTime()) + ".xls");
            wb.write(stream);
            JOptionPane.showMessageDialog(null, "Arquivo criado");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao criar arquivo, feche a planilha e tente novamente");
        }

    }//GEN-LAST:event_jButton3ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the jTable1
     */
    public javax.swing.JTable getjTable1() {
        return jTable1;
    }

    /**
     * @param jTable1 the jTable1 to set
     */
    public void setjTable1(javax.swing.JTable jTable1) {
        this.jTable1 = jTable1;
    }

    /**
     * @return the modeloTabela
     */
    public DefaultTableModel getModeloTabela() {
        return modeloTabela;
    }

    /**
     * @param modeloTabela the modeloTabela to set
     */
    public void setModeloTabela(DefaultTableModel modeloTabela) {
        this.modeloTabela = modeloTabela;
    }

    /**
     * @return the n
     */
    public int getN() {
        return n;
    }

    /**
     * @param n the n to set
     */
    public void setN(int n) {
        this.n = n;
    }

    /**
     * @return the diretorio
     */
    public String getDiretorio() {
        return diretorio;
    }

    /**
     * @param diretorio the diretorio to set
     */
    public void setDiretorio(String diretorio) {
        this.diretorio = diretorio;
    }
}
